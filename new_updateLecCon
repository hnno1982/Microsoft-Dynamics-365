// JavaScript source code

function updateLecCon() {
    var roles = [];
    roles[0] = "1- Own record updates for Lecturer (UPDATE)";

    var hasUserGotSalesManagerAndAdminRole = currentUserHasSecurityRole(roles);

    //check if the current form is form need to be displayed based on the value
    var val1 = Xrm.Page.getAttribute("accountrolecode")
    var valval = val1.getValue();

    if (hasUserGotSalesManagerAndAdminRole == true) {
         if (valval == 100000000 || valval == 100000001)
        {
            mfReadOnly()
        }
    }
}


function currentUserHasSecurityRole(roles) {
    var fetchXml =
        "<fetch mapping='logical'>" +
            "<entity name='systemuser'>" +
            "<attribute name='systemuserid' />" +
            "<filter type='and'>" +
            "<condition attribute='systemuserid' operator='eq-userid' />" +
            "</filter>" +
            "<link-entity name='systemuserroles' from='systemuserid' to='systemuserid' visible='false' intersect='true'>" +
            "<link-entity name='role' from='roleid' to='roleid' alias='r'>" +
            "<filter type='or'>";

    for (var i = 0; i < roles.length; i++) {
        fetchXml += "<condition attribute='name' operator='eq' value='" + roles[i] + "' />";
    }

    fetchXml += "            </filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "</entity>" +
        "</fetch>";
    var modifiedFetchXml = fetchXml.replace("&", "&amp;");
    var users = ExecuteFetch(modifiedFetchXml, "systemusers");
    if (users > 0)
        return true;
    else
        return false;
}

function ExecuteFetch(originalFetch, entityname) {
    var count = 0;
    var fetch = encodeURI(originalFetch);

    var serverURL = Xrm.Page.context.getClientUrl();
    var Query = entityname + "?fetchXml=" + fetch;
    var req = new XMLHttpRequest();
    req.open("GET", serverURL + "/api/data/v8.0/" + Query, false);
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.setRequestHeader("OData-MaxVersion", "4.0");
    req.setRequestHeader("OData-Version", "4.0");
    req.onreadystatechange = function () {
        if (this.readyState == 4 /* complete */) {
            req.onreadystatechange = null;
            if (this.status == 200) {
                var data = JSON.parse(this.response);
                if (data != null) {
                    count = data.value.length;
                }
            }
            else {
                var error = JSON.parse(this.response).error;
                alert(error.message);
            }
        }
    };
    req.send();
    return count;
};



function mfReadOnly() {

    var formType = Xrm.Page.ui.getFormType();

    if (formType == 2)
        makeFieldsReadOnly();
}


function makeFieldsReadOnly() {
    var controls = Xrm.Page.ui.controls.get();
    for (var i in controls) {
        var control = controls[i];
        if (control.getDisabled && control.setDisabled && !control.getDisabled()) {
            control.setDisabled(false);
        }
    }

}